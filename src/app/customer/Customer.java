package app.customer;

import app.city.City;
import app.order.Order;
import app.intemployee.Intemployee;
import app.extemployee.Extemployee;
import app.region.Region;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.StringProperty;
import javafx.beans.property.LongProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.SimpleLongProperty;

import java.time.LocalDate;

import java.sql.Date;
import java.util.HashSet;
import java.util.Set;

import javafx.beans.property.BooleanProperty;
import javafx.beans.property.SimpleBooleanProperty;
import org.springframework.cglib.core.Local;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

/**
 * Customer generated by hbm2java
 */
@Entity
@Table(name = "customer", catalog = "sm"
)
public class Customer implements java.io.Serializable {

    private LongProperty idCustomer;
    private ObjectProperty<City> city;
    private StringProperty code;
    private StringProperty firstName;
    private StringProperty lastName;
    private StringProperty gender;
    private ObjectProperty<LocalDate> birthdayDate;
    private StringProperty adresse;
    private StringProperty zip;
    private StringProperty email;
    private StringProperty phone;
    private StringProperty fax;
    private StringProperty note;
    private BooleanProperty loyal;
    private ObjectProperty<LocalDate> registrationDate;
    private StringProperty state;
    private Set<Order> orders = new HashSet<Order>(0);
    private ObjectProperty<Intemployee> intemployee;
    private ObjectProperty<Extemployee> extemployee;

    public Customer() {
        this.idCustomer = new SimpleLongProperty();
        this.city = new SimpleObjectProperty();
        this.code = new SimpleStringProperty();
        this.firstName = new SimpleStringProperty();
        this.lastName = new SimpleStringProperty();
        this.gender = new SimpleStringProperty();
        this.birthdayDate = new SimpleObjectProperty();
        this.adresse = new SimpleStringProperty();
        this.zip = new SimpleStringProperty();
        this.email = new SimpleStringProperty();
        this.phone = new SimpleStringProperty();
        this.fax = new SimpleStringProperty();
        this.note = new SimpleStringProperty();
        this.loyal = new SimpleBooleanProperty(true);
        this.registrationDate = new SimpleObjectProperty();
        this.state = new SimpleStringProperty();
        this.intemployee = new SimpleObjectProperty();
        this.extemployee = new SimpleObjectProperty();
    }

    public LongProperty idCustomerProperty() {
        return idCustomer;
    }

    public StringProperty codeProperty() {
        return code;
    }

    public StringProperty firstNameProperty() {
        return firstName;
    }

    public StringProperty lastNameProperty() {
        return lastName;
    }

    public StringProperty genderProperty() {
        return gender;
    }

    public StringProperty adresseProperty() {
        return adresse;
    }

    public StringProperty zipProperty() {
        return zip;
    }

    public StringProperty emailProperty() {
        return email;
    }

    public StringProperty phoneProperty() {
        return phone;
    }

    public StringProperty faxProperty() {
        return fax;
    }

    public StringProperty noteProperty() {
        return note;
    }

    public StringProperty stateProperty() {
        return state;
    }

    public ObjectProperty<LocalDate> birthdayDateProperty() {
        return birthdayDate;
    }

    public ObjectProperty<City> cityProperty() {
        return city;
    }

    public ObjectProperty<Region> regionProperty() {
        if (city.get() != null)
            return new SimpleObjectProperty<Region>(city.get().getRegion());
        return null;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "id_customer", unique = true, nullable = false)
    public Long getIdCustomer() {
        return this.idCustomer.get();
    }

    public void setIdCustomer(Long idCustomer) {
        this.idCustomer.set(idCustomer);
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_city", nullable = true)
    public City getCity() {
        return this.city.get();
    }

    public void setCity(City city) {
        this.city.set(city);
    }

    @Column(name = "code")
    public String getCode() {
        return this.code.get();
    }

    public void setCode(String code) {
        this.code.set(code);
    }

    @Column(name = "first_name")
    public String getFirstName() {
        return this.firstName.get();
    }

    public void setFirstName(String firstName) {
        this.firstName.set(firstName);
    }

    @Column(name = "last_name")
    public String getLastName() {
        return this.lastName.get();
    }

    public void setLastName(String lastName) {
        this.lastName.set(lastName);
    }

    @Column(name = "gender", length = 10)
    public String getGender() {
        return this.gender.get();
    }

    public void setGender(String gender) {
        this.gender.set(gender);
    }

    //@Temporal(TemporalType.DATE)
    @Column(name = "birthday_date", length = 10)
    public Date getBirthdayDate() {
        if (this.birthdayDate.get() == null)
            return null;
        return Date.valueOf(this.birthdayDate.get());
    }

    public void setBirthdayDate(Date birthdayDate) {
        if (birthdayDate != null)
            this.birthdayDate.set(birthdayDate.toLocalDate());
    }

    @Column(name = "adresse")
    public String getAdresse() {
        return this.adresse.get();
    }

    public void setAdresse(String adresse) {
        this.adresse.set(adresse);
    }

    @Column(name = "zip")
    public String getZip() {
        return this.zip.get();
    }

    public void setZip(String zip) {
        this.zip.set(zip);
    }

    @Column(name = "email")
    public String getEmail() {
        return this.email.get();
    }

    public void setEmail(String email) {
        this.email.set(email);
    }

    @Column(name = "phone")
    public String getPhone() {
        return this.phone.get();
    }

    public void setPhone(String phone) {
        this.phone.set(phone);
    }

    @Column(name = "fax")
    public String getFax() {
        return this.fax.get();
    }

    public void setFax(String fax) {
        this.fax.set(fax);
    }

    @Column(name = "note")
    public String getNote() {
        return this.note.get();
    }

    public void setNote(String note) {
        this.note.set(note);
    }

    @Column(name = "loyal")
    public Boolean getLoyal() {
        return this.loyal.get();
    }

    public void setLoyal(Boolean loyal) {
        this.loyal.set(loyal);
    }

    //@Temporal(TemporalType.DATE)
    @Column(name = "registration_date", length = 10)
    public Date getRegistrationDate() {
        if (this.registrationDate.get() == null)
            return new Date(new java.util.Date().getTime());
        return Date.valueOf(this.registrationDate.get());
    }

    public void setRegistrationDate(Date registrationDate) {
        this.registrationDate.set(registrationDate.toLocalDate());
    }

    @Column(name = "state")
    public String getState() {
        return this.state.get();
    }

    public void setState(String state) {
        this.state.set(state);
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "customer")
    public Set<Order> getOrders() {
        return this.orders;
    }

    public void setOrders(Set<Order> orders) {
        this.orders = orders;
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "customer")
    public Intemployee getIntemployee() {
        return this.intemployee.get();
    }

    public void setIntemployee(Intemployee intemployee) {
        this.intemployee.set(intemployee);
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "customer")
    public Extemployee getExtemployee() {
        return this.extemployee.get();
    }

    public void setExtemployee(Extemployee extemployee) {
        this.extemployee.set(extemployee);
    }

    public void addOrder(Order order) {
        this.orders.add(order);
    }

    @Override
    public String toString() {
        return getFirstName() + " " + getLastName();
    }
}
