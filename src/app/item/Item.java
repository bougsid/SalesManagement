package app.item;

import app.category.Category;
import app.orderline.Orderline;
import app.supplier.Supplier;
import javafx.beans.property.FloatProperty;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.StringProperty;
import javafx.beans.property.LongProperty;
import javafx.beans.property.SimpleFloatProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.SimpleLongProperty;

import java.time.LocalDate;

import java.sql.Date;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

/**
 * Item generated by hbm2java
 */
@Entity
@Table(name = "item", catalog = "sm"
)
public class Item implements java.io.Serializable {

    private LongProperty idItem;
    private ObjectProperty<Category> category;
    private StringProperty barcode;
    private StringProperty label;
    private StringProperty description;
    private IntegerProperty quantity;
    private FloatProperty price;
    private ObjectProperty<LocalDate> expirationDate;
    private StringProperty additionalInfo;
    private Set<ItemSupplier> itemSuppliers = new HashSet<ItemSupplier>(0);
    private Set<Orderline> orderlines = new HashSet<Orderline>(0);

    private List<Supplier> suppliers;

    public Item() {
        this.idItem = new SimpleLongProperty();
        this.category = new SimpleObjectProperty();
        this.barcode = new SimpleStringProperty();
        this.label = new SimpleStringProperty();
        this.description = new SimpleStringProperty();
        this.quantity = new SimpleIntegerProperty();
        this.price = new SimpleFloatProperty();
        this.expirationDate = new SimpleObjectProperty();
        this.additionalInfo = new SimpleStringProperty();
    }

    public LongProperty idItemProperty() {
        return idItem;
    }

    public StringProperty barcodeProperty() {
        return barcode;
    }

    public StringProperty labelProperty() {
        return label;
    }

    public StringProperty descriptionProperty() {
        return description;
    }

    public IntegerProperty quantityProperty() {
        return quantity;
    }

    public FloatProperty priceProperty() {
        return price;
    }

    public StringProperty additionalInfoProperty() {
        return additionalInfo;
    }

    public ObjectProperty<Category> categoryProperty() {
        return category;
    }

    public ObjectProperty<LocalDate> expirationDateProperty() {
        return expirationDate;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "id_item", unique = true, nullable = false)
    public Long getIdItem() {
        return this.idItem.get();
    }

    public void setIdItem(Long idItem) {
        this.idItem.set(idItem);
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_category", nullable = true)
    public Category getCategory() {
        return this.category.get();
    }

    public void setCategory(Category category) {
        this.category.set(category);
    }

    @Column(name = "barcode")
    public String getBarcode() {
        return this.barcode.get();
    }

    public void setBarcode(String barcode) {
        this.barcode.set(barcode);
    }

    @Column(name = "label")
    public String getLabel() {
        return this.label.get();
    }

    public void setLabel(String label) {
        this.label.set(label);
    }

    @Column(name = "description")
    public String getDescription() {
        return this.description.get();
    }

    public void setDescription(String description) {
        this.description.set(description);
    }

    @Column(name = "quantity")
    public Integer getQuantity() {
        return this.quantity.get();
    }

    public void setQuantity(Integer quantity) {
        this.quantity.set(quantity);
    }

    @Column(name = "price", precision = 12, scale = 0)
    public Float getPrice() {
        return this.price.get();
    }

    public void setPrice(Float price) {
        this.price.set(price);
    }

    //@Temporal(TemporalType.DATE)
    @Column(name = "expiration_date", nullable = true, length = 10)
    public Date getExpirationDate() {
        if (this.expirationDate.get() == null) return null;
        return Date.valueOf(this.expirationDate.get());
    }

    public void setExpirationDate(Date expirationDate) {
        if (expirationDate != null)
            this.expirationDate.set(expirationDate.toLocalDate());
    }

    @Column(name = "additional_info")
    public String getAdditionalInfo() {
        return this.additionalInfo.get();
    }

    public void setAdditionalInfo(String additionalInfo) {
        this.additionalInfo.set(additionalInfo);
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "item")
    public Set<ItemSupplier> getItemSuppliers() {
        return this.itemSuppliers;
    }

    public void setItemSuppliers(Set<ItemSupplier> itemSuppliers) {
        this.itemSuppliers = itemSuppliers;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "item")
    public Set<Orderline> getOrderlines() {
        return this.orderlines;
    }

    public void setOrderlines(Set<Orderline> orderlines) {
        this.orderlines = orderlines;
    }

    @Transient
    public List<Supplier> getSuppliers() {
        if (this.suppliers == null) {
            this.suppliers = new ArrayList<>();
            for (ItemSupplier is : this.itemSuppliers) {
                this.suppliers.add(is.getSupplier());
            }
        }
        return this.suppliers;
    }

    @Override
    public String toString() {
        return getLabel() + "|" + getPrice() + "|" + getBarcode() + "|" + getCategory();
    }
}
