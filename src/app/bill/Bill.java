package app.bill;

import app.check.Check;
import app.order.Order;
import app.payment.Payment;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.LongProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleLongProperty;

import java.time.LocalDate;

import java.sql.Date;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.*;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Bill generated by hbm2java
 */
@Entity
@Table(name = "bill", catalog = "sm"
)
public class Bill implements java.io.Serializable {

    private LongProperty idBill;
    private ObjectProperty<Order> order;
    private ObjectProperty<LocalDate> creationDate;
    private Set<Payment> payments = new HashSet<Payment>(0);

    public Bill() {
        this.idBill = new SimpleLongProperty();
        this.order = new SimpleObjectProperty();
        this.creationDate = new SimpleObjectProperty();
    }

    public LongProperty idBillProperty() {
        return idBill;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "id_bill", unique = true, nullable = false)
    public Long getIdBill() {
        return this.idBill.get();
    }

    public void setIdBill(Long idBill) {
        this.idBill.set(idBill);
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_order", nullable = false)
    public Order getOrder() {
        return this.order.get();
    }

    public void setOrder(Order order) {
        this.order.set(order);
    }

    //@Temporal(TemporalType.DATE)
    @Column(name = "creation_date", length = 10)
    public Date getCreationDate() {
        return Date.valueOf(this.creationDate.get());
    }

    public void setCreationDate(Date creationDate) {
        this.creationDate.set(creationDate.toLocalDate());
    }

    //@ManyToMany(fetch = FetchType.LAZY, mappedBy = "bills")
    @ManyToMany(fetch = FetchType.LAZY, mappedBy = "bills", cascade = {CascadeType.ALL, CascadeType.MERGE})
    public Set<Payment> getPayments() {
        return this.payments;
    }

    public void setPayments(Set<Payment> payments) {
        this.payments = payments;
    }

    @Transient
    public List<Check> getChecks() {
        List<Check> checks = new ArrayList<>();
        for(Payment payment: this.payments){
            if(payment instanceof Check){
                checks.add((Check)payment);
            }
        }
        return checks;
    }

    public void addPayment(Payment payment) {
        this.payments.add(payment);
    }
    public void removePayment(Payment payment) {
        this.payments.remove(payment);
    }
//    @OneToMany(fetch = FetchType.LAZY, mappedBy = "bill")
//    public Set<Order> getOrders() {
//        return this.orders;
//    }
//
//    public void setOrders(Set<Order> orders) {
//        this.orders = orders;
//    }
}
